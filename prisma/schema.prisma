// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  isAdmin       Boolean   @default(false)

  // Subscription fields
  subscriptionTier  String   @default("pro") // pro, enterprise, lifetime
  subscriptionStatus String  @default("active") // active, cancelled, expired
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?

  // Usage limits
  interviewsThisMonth Int     @default(0)
  feedbackThisMonth   Int     @default(0)
  lastResetDate       DateTime @default(now())

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  sessions      InterviewSession[]
  accounts      Account[]
  resumes       Resume[]
  verificationTokens VerificationToken[]
  passwordResetTokens PasswordResetToken[]
}

model VerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([token])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model InterviewSession {
  id                 String   @id @default(cuid())
  userId             String
  roleTitle          String
  roleCategory       String
  roleLevel          String
  company            String
  date               DateTime @default(now())
  completionRate     Int
  totalQuestions     Int
  answeredQuestions  Int
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  responses Response[]

  @@index([userId])
  @@index([date])
}

model Response {
  id        String   @id @default(cuid())
  sessionId String
  question  String
  audioURL  String?
  duration  Int
  feedback  String?
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  session InterviewSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String
  title     String   @default("My Resume")
  template  String   @default("modern") // modern, professional, creative, minimal

  // Personal Information
  fullName     String
  email        String
  phone        String?
  location     String?
  linkedin     String?
  github       String?
  website      String?
  summary      String?

  // Experience (JSON array)
  experience   String   @default("[]") // JSON array of work experiences

  // Education (JSON array)
  education    String   @default("[]") // JSON array of education entries

  // Skills (JSON array)
  skills       String   @default("[]") // JSON array of skills

  // Projects (JSON array)
  projects     String   @default("[]") // JSON array of projects

  // Certifications (JSON array)
  certifications String @default("[]") // JSON array of certifications

  // AI-generated content
  aiOptimized  Boolean  @default(false)
  aiSuggestions String? // JSON array of AI suggestions

  // Metadata
  isPublic     Boolean  @default(false)
  isPrimary    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([isPrimary])
}

